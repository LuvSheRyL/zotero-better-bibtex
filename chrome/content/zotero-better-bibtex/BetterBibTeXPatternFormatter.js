// Generated by CoffeeScript 1.10.0
var BetterBibTeXPatternFormatter;

BetterBibTeXPatternFormatter = (function() {
  function BetterBibTeXPatternFormatter(patterns, fold) {
    this.patterns = patterns;
    this.fold = fold;
    Zotero.BetterBibTeX.debug('formatter:', this.patterns, this.fold);
  }

  BetterBibTeXPatternFormatter.prototype.re = {
    unsafechars: Zotero.Utilities.XRegExp("[^-\\p{L}0-9_!$*+./;?\\[\\]]"),
    alphanum: Zotero.Utilities.XRegExp("[^\\p{L}\\p{N}]"),
    punct: Zotero.Utilities.XRegExp('\\p{Pc}|\\p{Pd}|\\p{Pe}|\\p{Pf}|\\p{Pi}|\\p{Po}|\\p{Ps}', 'g'),
    caseNotUpperTitle: Zotero.Utilities.XRegExp('[^\\p{Lu}\\p{Lt}]', 'g'),
    caseNotUpper: Zotero.Utilities.XRegExp('[^\\p{Lu}]', 'g'),
    word: Zotero.Utilities.XRegExp("[\\p{L}\\p{Nd}\\{Pc}\\p{M}]+", 'g')
  };

  BetterBibTeXPatternFormatter.prototype.format = function(item) {
    var candidate, citekey, date, i, len, ref, ref1;
    this.item = Zotero.BetterBibTeX.serialized.get(item);
    delete this.year;
    delete this.month;
    if ((ref = this.item.itemType) === 'attachment' || ref === 'note') {
      return {};
    }
    if (this.item.date) {
      date = Zotero.BetterBibTeX.DateParser.prototype.parseDateToObject(this.item.date, {
        locale: this.item.language,
        verbatimDetection: false
      });
      if (date) {
        if (date.literal) {
          date = Zotero.Date.strToDate(this.item.date);
          this.year = parseInt(date.year);
          if (isNaN(this.year)) {
            delete this.year;
          }
          this.month = parseInt(date.month);
          if (isNaN(this.month)) {
            delete this.month;
          }
        } else {
          this.year = date.year;
          this.month = date.month;
        }
      }
    }
    ref1 = this.patterns[0];
    for (i = 0, len = ref1.length; i < len; i++) {
      candidate = ref1[i];
      delete this.postfix;
      citekey = this.concat(candidate);
      if (citekey !== '') {
        return {
          citekey: citekey,
          postfix: this.postfix
        };
      }
    }
    return {};
  };

  BetterBibTeXPatternFormatter.prototype.alternates = function(item) {
    var candidate, citekey, citekeys, i, j, len, len1, pattern, ref, ref1;
    this.item = Zotero.BetterBibTeX.serialized.get(item);
    if ((ref = this.item.itemType) === 'attachment' || ref === 'note') {
      return;
    }
    citekeys = [];
    ref1 = this.patterns;
    for (i = 0, len = ref1.length; i < len; i++) {
      pattern = ref1[i];
      citekey = '';
      for (j = 0, len1 = pattern.length; j < len1; j++) {
        candidate = pattern[j];
        citekey = this.concat(candidate);
        if (citekey !== '') {
          break;
        }
      }
      citekeys.push(citekey);
    }
    return citekeys;
  };

  BetterBibTeXPatternFormatter.prototype.concat = function(pattern) {
    var part, result;
    result = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = pattern.length; i < len; i++) {
        part = pattern[i];
        results.push(this.reduce(part));
      }
      return results;
    }).call(this);
    result = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = result.length; i < len; i++) {
        part = result[i];
        if (part) {
          results.push(part);
        }
      }
      return results;
    })();
    result = result.join('').replace(/[\s{},]/g, '');
    if (this.fold) {
      result = Zotero.BetterBibTeX.removeDiacritics(result);
    }
    return result;
  };

  BetterBibTeXPatternFormatter.prototype.reduce = function(step) {
    var filter, i, len, ref, value;
    value = this.methods[step.method].apply(this, step["arguments"]);
    if (!value) {
      value = '';
    }
    ref = step.filters || [];
    for (i = 0, len = ref.length; i < len; i++) {
      filter = ref[i];
      value = this.filters[filter.filter].apply(this, [value].concat(filter["arguments"]));
      if (!value) {
        value = '';
      }
    }
    if (step.scrub) {
      value = this.clean(value);
    }
    return value;
  };

  BetterBibTeXPatternFormatter.prototype.clean = function(str) {
    return this.safechars(Zotero.BetterBibTeX.removeDiacritics(str || '')).trim();
  };

  BetterBibTeXPatternFormatter.prototype.safechars = function(str) {
    return Zotero.Utilities.XRegExp.replace(str, this.re.unsafechars, '', 'all');
  };

  BetterBibTeXPatternFormatter.prototype.words = function(str) {
    var word;
    return (function() {
      var i, len, ref, results;
      ref = Zotero.Utilities.XRegExp.matchChain(this.innerText(str), [this.re.word]);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        word = ref[i];
        if (word !== '') {
          results.push(this.clean(word));
        }
      }
      return results;
    }).call(this);
  };

  BetterBibTeXPatternFormatter.prototype.months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];

  BetterBibTeXPatternFormatter.prototype.titleWords = function(title, options) {
    var word, words;
    if (options == null) {
      options = {};
    }
    if (!title) {
      return null;
    }
    words = this.words(title);
    if (options.asciiOnly) {
      words = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = words.length; i < len; i++) {
          word = words[i];
          results.push(word.replace(/[^ -~]/g, ''));
        }
        return results;
      })();
    }
    words = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = words.length; i < len; i++) {
        word = words[i];
        if (word !== '') {
          results.push(word);
        }
      }
      return results;
    })();
    if (options.skipWords) {
      words = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = words.length; i < len; i++) {
          word = words[i];
          if (this.skipWords.indexOf(word.toLowerCase()) < 0 && Zotero.BetterBibTeX.punycode.ucs2.decode(word).length > 1) {
            results.push(word);
          }
        }
        return results;
      }).call(this);
    }
    if (words.length === 0) {
      return null;
    }
    return words;
  };

  BetterBibTeXPatternFormatter.prototype.innerText = function(str) {
    return Zotero.BetterBibTeX.HTMLParser.text(str);
  };

  BetterBibTeXPatternFormatter.prototype.creators = function(onlyEditors, withInitials) {
    var creator, creators, i, initials, len, name, primaryCreatorType, ref, ref1, ref2;
    if (!((ref = this.item.creators) != null ? ref.length : void 0)) {
      return [];
    }
    creators = {};
    primaryCreatorType = Zotero.Utilities.getCreatorsForType(this.item.itemType)[0];
    ref1 = this.item.creators;
    for (i = 0, len = ref1.length; i < len; i++) {
      creator = ref1[i];
      if (onlyEditors && ((ref2 = creator.creatorType) !== 'editor' && ref2 !== 'seriesEditor')) {
        continue;
      }
      name = this.innerText(creator.name || creator.lastName);
      if (name !== '') {
        if (withInitials && creator.firstName) {
          initials = Zotero.Utilities.XRegExp.replace(creator.firstName, this.re.caseNotUpperTitle, '', 'all');
          initials = Zotero.BetterBibTeX.removeDiacritics(initials);
          initials = Zotero.Utilities.XRegExp.replace(initials, this.re.caseNotUpper, '', 'all');
          name += initials;
        }
      } else {
        name = this.innerText(creator.firstName);
      }
      if (name === '') {
        continue;
      }
      switch (creator.creatorType) {
        case 'editor':
        case 'seriesEditor':
          creators.editors || (creators.editors = []);
          creators.editors.push(name);
          break;
        case 'translator':
          creators.translators || (creators.translators = []);
          creators.translators.push(name);
          break;
        case primaryCreatorType:
          creators.authors || (creators.authors = []);
          creators.authors.push(name);
          break;
        default:
          creators.collaborators || (creators.collaborators = []);
          creators.collaborators.push(name);
      }
    }
    if (onlyEditors) {
      return creators.editors || [];
    }
    return creators.authors || creators.editors || creators.translators || creators.collaborators || [];
  };

  BetterBibTeXPatternFormatter.prototype.methods = {
    '0': function(text) {
      this.postfix = '0';
      return '';
    },
    literal: function(text) {
      return text;
    },
    property: function(name) {
      return this.innerText(this.item[name] || this.item[name[0].toLowerCase() + name.slice(1)] || '');
    },
    id: function() {
      return this.item.itemID;
    },
    key: function() {
      return this.item.key;
    },
    auth: function(onlyEditors, withInitials, n, m) {
      var author, authors;
      authors = this.creators(onlyEditors, withInitials);
      if (!authors) {
        return '';
      }
      author = authors[m || 0];
      if (author && n) {
        author = author.substring(0, n);
      }
      return author != null ? author : '';
    },
    authorLast: function(onlyEditors, withInitials) {
      var authors, ref;
      authors = this.creators(onlyEditors, withInitials);
      if (!authors) {
        return '';
      }
      return (ref = authors[authors.length - 1]) != null ? ref : '';
    },
    journal: function() {
      return Zotero.BetterBibTeX.keymanager.journalAbbrev(this.item);
    },
    authors: function(onlyEditors, withInitials, n) {
      var authors, etal;
      authors = this.creators(onlyEditors, withInitials);
      if (!authors) {
        return '';
      }
      if (n) {
        etal = authors.length > n;
        authors = authors.slice(0, n);
        if (etal) {
          authors.push('EtAl');
        }
      }
      authors = authors.join('');
      return authors;
    },
    authorsAlpha: function(onlyEditors, withInitials) {
      var author, authors;
      authors = this.creators(onlyEditors, withInitials);
      if (!authors) {
        return '';
      }
      switch (authors.length) {
        case 1:
          return authors[0].substring(0, 3);
        case 2:
        case 3:
        case 4:
          return ((function() {
            var i, len, results;
            results = [];
            for (i = 0, len = authors.length; i < len; i++) {
              author = authors[i];
              results.push(author.substring(0, 1));
            }
            return results;
          })()).join('');
        default:
          return ((function() {
            var i, len, ref, results;
            ref = authors.slice(0, 3);
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              author = ref[i];
              results.push(author.substring(0, 1));
            }
            return results;
          })()).join('') + '+';
      }
    },
    authIni: function(onlyEditors, withInitials, n) {
      var author, authors;
      authors = this.creators(onlyEditors, withInitials);
      if (!authors) {
        return '';
      }
      return ((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = authors.length; i < len; i++) {
          author = authors[i];
          results.push(author.substring(0, n));
        }
        return results;
      })()).join('.');
    },
    authorIni: function(onlyEditors, withInitials) {
      var auth, authors, firstAuthor, name;
      authors = this.creators(onlyEditors, withInitials);
      if (!authors) {
        return '';
      }
      firstAuthor = authors.shift();
      return [firstAuthor.substring(0, 5)].concat((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = authors.length; i < len; i++) {
          auth = authors[i];
          results.push(((function() {
            var j, len1, results1;
            results1 = [];
            for (j = 0, len1 = auth.length; j < len1; j++) {
              name = auth[j];
              results1.push(name.substring(0, 1));
            }
            return results1;
          })()).join('.'));
        }
        return results;
      })()).join('.');
    },
    'auth.auth.ea': function(onlyEditors, withInitials) {
      var authors;
      authors = this.creators(onlyEditors, withInitials);
      if (!authors) {
        return '';
      }
      return authors.slice(0, 2).concat((authors.length > 2 ? ['ea'] : [])).join('.');
    },
    'auth.etal': function(onlyEditors, withInitials) {
      var authors;
      authors = this.creators(onlyEditors, withInitials);
      if (!authors) {
        return '';
      }
      if (authors.length === 2) {
        return authors.join('.');
      }
      return authors.slice(0, 1).concat((authors.length > 1 ? ['etal'] : [])).join('.');
    },
    authshort: function(onlyEditors, withInitials) {
      var author, authors;
      authors = this.creators(onlyEditors, withInitials);
      if (!authors) {
        return '';
      }
      switch (authors.length) {
        case 0:
          return '';
        case 1:
          return authors[0];
        default:
          return ((function() {
            var i, len, results;
            results = [];
            for (i = 0, len = authors.length; i < len; i++) {
              author = authors[i];
              results.push(author.substring(0, 1));
            }
            return results;
          })()).join('.') + (authors.length > 3 ? '+' : '');
      }
    },
    firstpage: function() {
      var firstpage;
      if (!this.item.pages) {
        return '';
      }
      firstpage = '';
      this.item.pages.replace(/^([0-9]+)/g, function(match, fp) {
        return firstpage = fp;
      });
      return firstpage;
    },
    keyword: function(n) {
      var ref;
      if (!((ref = this.item.tags) != null ? ref[n] : void 0)) {
        return '';
      }
      return this.item.tags[n].tag;
    },
    lastpage: function() {
      var lastpage;
      if (!this.item.pages) {
        return '';
      }
      lastpage = '';
      this.item.pages.replace(/([0-9]+)[^0-9]*$/g, function(match, lp) {
        return lastpage = lp;
      });
      return lastpage;
    },
    shorttitle: function() {
      var words;
      words = this.titleWords(this.item.title, {
        skipWords: true,
        asciiOnly: true
      });
      if (!words) {
        return '';
      }
      return words.slice(0, 3).join('');
    },
    veryshorttitle: function() {
      var words;
      words = this.titleWords(this.item.title, {
        skipWords: true,
        asciiOnly: true
      });
      if (!words) {
        return '';
      }
      return words.slice(0, 1).join('');
    },
    shortyear: function() {
      var year;
      if (!this.year) {
        return '';
      }
      year = this.year % 100;
      if (year < 10) {
        return "0" + year;
      }
      return '' + year;
    },
    year: function() {
      return this.year || '';
    },
    month: function() {
      var ref;
      if (!this.month) {
        return '';
      }
      return (ref = this.months[this.month - 1]) != null ? ref : '';
    },
    title: function() {
      return this.titleWords(this.item.title).join('');
    }
  };

  BetterBibTeXPatternFormatter.prototype.filters = {
    ifempty: function(value, dflt) {
      if ((value || '') === '') {
        return dflt;
      }
      return value;
    },
    condense: function(value, sep) {
      if (typeof sep === 'undefined') {
        sep = '';
      }
      return (value || '').replace(/\s/g, sep);
    },
    prefix: function(value, prefix) {
      value || (value = '');
      if (value !== '' && prefix) {
        return "" + prefix + value;
      }
      return value;
    },
    postfix: function(value, postfix) {
      value || (value = '');
      if (value !== '' && postfix) {
        return value + postfix;
      }
      return value;
    },
    abbr: function(value) {
      var word;
      return ((function() {
        var i, len, ref, results;
        ref = (value || '').split(/\s+/);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          word = ref[i];
          results.push(word.substring(0, 1));
        }
        return results;
      })()).join('');
    },
    lower: function(value) {
      return (value || '').toLowerCase();
    },
    upper: function(value) {
      return (value || '').toUpperCase();
    },
    skipwords: function(value) {
      var word;
      return ((function() {
        var i, len, ref, results;
        ref = (value || '').split(/\s+/);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          word = ref[i];
          if (this.skipWords.indexOf(word.toLowerCase()) < 0) {
            results.push(word);
          }
        }
        return results;
      }).call(this)).join(' ').trim();
    },
    select: function(value, start, n) {
      var end;
      value = (value || '').split(/\s+/);
      end = value.length;
      if (typeof start === 'undefined') {
        start = 1;
      }
      start = parseInt(start) - 1;
      if (typeof n !== 'undefined') {
        end = start + parseInt(n);
      }
      return value.slice(start, end).join(' ');
    },
    substring: function(value, start, n) {
      return (value || '').slice(start - 1, start - 1 + n);
    },
    ascii: function(value) {
      return (value || '').replace(/[^ -~]/g, '').split(/\s+/).join(' ').trim();
    },
    alphanum: function(value) {
      return Zotero.Utilities.XRegExp.replace(value || '', this.re.alphanum, '', 'all').split(/\s+/).join(' ').trim();
    },
    fold: function(value) {
      return Zotero.BetterBibTeX.removeDiacritics(value || '').split(/\s+/).join(' ').trim();
    },
    capitalize: function(value) {
      return (value || '').replace(/((^|\s)[a-z])/g, function(m) {
        return m.toUpperCase();
      });
    },
    nopunct: function(value) {
      return Zotero.Utilities.XRegExp.replace(value || '', this.re.punct, '', 'all');
    }
  };

  BetterBibTeXPatternFormatter.prototype.HTML = (function() {
    function _Class(html) {
      this.text = '';
      this.HTMLtoDOM.Parser(html, this);
    }

    _Class.prototype.cdata = function(text) {
      return this.text += text;
    };

    _Class.prototype.chars = function(text) {
      return this.text += text;
    };

    return _Class;

  })();

  return BetterBibTeXPatternFormatter;

})();
