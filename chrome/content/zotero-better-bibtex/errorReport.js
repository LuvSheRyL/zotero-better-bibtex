// Generated by CoffeeScript 1.10.0
var Zotero_BetterBibTeX_ErrorReport,
  hasProp = {}.hasOwnProperty;

Components.utils["import"]('resource://zotero/config.js');

Zotero_BetterBibTeX_ErrorReport = new ((function() {
  function _Class() {
    this.form = JSON.parse(Zotero.File.getContentsFromURL("https://zotplus.github.io/s3.json"));
  }

  _Class.prototype.submit = function(filename, data, callback) {
    var fd, file, name, ref, request, value;
    fd = new FormData();
    ref = this.form.fields;
    for (name in ref) {
      if (!hasProp.call(ref, name)) continue;
      value = ref[name];
      fd.append(name, value);
    }
    file = new Blob([data], {
      type: 'text/plain'
    });
    fd.append('file', file, this.timestamp + "-" + this.key + "-" + filename);
    request = Components.classes["@mozilla.org/xmlextras/xmlhttprequest;1"].createInstance();
    request.open('POST', this.form.action, true);
    request.onload = function(e) {
      if (request.readystate !== 4) {
        return callback(request);
      }
    };
    request.onerror = function(e) {
      return callback(request);
    };
    return request.send(fd);
  };

  _Class.prototype.init = function() {
    var continueButton, wizard;
    this.key = Zotero.Utilities.generateObjectKey();
    this.timestamp = (new Date()).toISOString().replace(/\..*/, '').replace(/:/g, '.');
    wizard = document.getElementById('zotero-error-report');
    continueButton = wizard.getButton('next');
    continueButton.disabled = true;
    document.getElementById('betterbibtex.errorReport.references').hidden = true;
    return Zotero.getSystemInfo((function(_this) {
      return function(info) {
        var debug, line, params;
        _this.errorlog = {
          info: info,
          errors: Zotero.getErrors(true).join('\n'),
          full: Zotero.Debug.get()
        };
        debug = _this.errorlog.full.split("\n");
        debug = debug.slice(0, 5000);
        debug = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = debug.length; i < len; i++) {
            line = debug[i];
            results.push(Zotero.Utilities.ellipsize(line, 80, true));
          }
          return results;
        })();
        debug = debug.join("\n");
        _this.errorlog.truncated = debug;
        params = window["arguments"][0].wrappedJSObject;
        if (params.references) {
          document.getElementById('betterbibtex.errorReport.references').hidden = false;
          document.getElementById('zotero-error-references').value = params.references.substring(0, 5000);
        } else {
          document.getElementById("zotero-error-include-references").checked = false;
        }
        document.getElementById('zotero-error-context').value = info;
        document.getElementById('zotero-error-errors').value = _this.errorlog.errors;
        document.getElementById('zotero-error-log').value = _this.errorlog.truncated;
        continueButton.disabled = false;
        return continueButton.focus();
      };
    })(this));
  };

  _Class.prototype.selectReportPart = function() {
    var continueButton, enabled, i, len, part, ref, wizard;
    enabled = false;
    ref = ['context', 'errors', 'log', 'references'];
    for (i = 0, len = ref.length; i < len; i++) {
      part = ref[i];
      if (!document.getElementById("zotero-error-include-" + part).checked) {
        continue;
      }
      enabled = part;
      break;
    }
    Zotero.BetterBibTeX.debug('selectReportPart:', enabled);
    wizard = document.getElementById('zotero-error-report');
    continueButton = wizard.getButton('next');
    return continueButton.disabled = !enabled;
  };

  _Class.prototype.finished = function() {
    var wizard;
    wizard = document.getElementById('zotero-error-report');
    wizard.advance();
    wizard.getButton('cancel').disabled = true;
    wizard.canRewind = false;
    document.getElementById('zotero-report-id').setAttribute('value', this.key);
    return document.getElementById('zotero-report-result').hidden = false;
  };

  _Class.prototype.verify = function(request) {
    var ps, wizard;
    wizard = document.getElementById('zotero-error-report');
    ps = Components.classes['@mozilla.org/embedcomp/prompt-service;1'].getService(Components.interfaces.nsIPromptService);
    switch (false) {
      case !(!request || !request.status || request.status > 1000):
        ps.alert(null, Zotero.getString('general.error'), Zotero.getString('errorReport.noNetworkConnection') + ': ' + (request != null ? request.status : void 0));
        break;
      case request.status === parseInt(this.form.fields.success_action_status):
        ps.alert(null, Zotero.getString('general.error'), Zotero.getString('errorReport.invalidResponseRepository') + (": " + request.status + ", expected " + this.form.fields.success_action_status + "\n" + request.responseText));
        break;
      default:
        return true;
    }
    if (wizard != null ? wizard.rewind : void 0) {
      wizard.rewind();
    }
    return false;
  };

  _Class.prototype.sendErrorReport = function() {
    var continueButton, errorlog, params, part, wizard;
    wizard = document.getElementById('zotero-error-report');
    continueButton = wizard.getButton('next');
    continueButton.disabled = true;
    if (!document.getElementById("zotero-error-include-context").checked) {
      this.errorlog.info = "Zotero: " + ZOTERO_CONFIG.VERSION + ", Better BibTeX: " + Zotero.BetterBibTeX.release;
    }
    if (!document.getElementById("zotero-error-include-errors").checked) {
      this.errorlog.errors = null;
    }
    if (!document.getElementById("zotero-error-include-log").checked) {
      this.errorlog.full = null;
    }
    errorlog = ((function() {
      var i, len, ref, results;
      ref = [this.errorlog.info, this.errorlog.errors, this.errorlog.full];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        part = ref[i];
        if (part) {
          results.push(part);
        }
      }
      return results;
    }).call(this)).join("\n\n");
    params = window["arguments"][0].wrappedJSObject;
    return this.submit('errorlog.txt', errorlog, (function(_this) {
      return function(request) {
        if (!_this.verify(request)) {
          return;
        }
        if (!(params.references && document.getElementById("zotero-error-include-references").checked)) {
          return _this.finished();
        }
        return _this.submit('references.json', params.references, function(request) {
          if (!_this.verify(request)) {
            return;
          }
          return _this.finished();
        });
      };
    })(this));
  };

  return _Class;

})());
