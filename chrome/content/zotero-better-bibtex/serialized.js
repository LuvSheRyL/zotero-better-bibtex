// Generated by CoffeeScript 1.10.0
Components.utils["import"]("resource://zotero/config.js");

Zotero.BetterBibTeX.serialized = new ((function() {
  _Class.prototype.fixup = function(item, itemID) {
    var tag;
    if (item.itemID == null) {
      item.itemID = itemID;
    }
    item.itemID = parseInt(item.itemID);
    item.tags = (function() {
      var i, len, ref, results;
      ref = item.tags;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        tag = ref[i];
        results.push(typeof tag === 'object' ? tag.tag : tag);
      }
      return results;
    })();
    switch (item.itemType) {
      case 'artwork':
        if (item.medium == null) {
          item.medium = item.artworkMedium;
        }
        break;
      case 'audioRecording':
        if (item.medium == null) {
          item.medium = item.audioRecordingFormat;
        }
        if (item.publisher == null) {
          item.publisher = item.label;
        }
        break;
      case 'bill':
        if (item.number == null) {
          item.number = item.billNumber;
        }
        if (item.pages == null) {
          item.pages = item.codePages;
        }
        if (item.volume == null) {
          item.volume = item.codeVolume;
        }
        break;
      case 'blogPost':
        if (item.publicationTitle == null) {
          item.publicationTitle = item.blogTitle;
        }
        if (item.type == null) {
          item.type = item.websiteType;
        }
        break;
      case 'bookSection':
        if (item.publicationTitle == null) {
          item.publicationTitle = item.bookTitle;
        }
        break;
      case 'case':
        if (item.date == null) {
          item.date = item.dateDecided;
        }
        if (item.number == null) {
          item.number = item.docketNumber;
        }
        if (item.pages == null) {
          item.pages = item.firstPage;
        }
        if (item.title == null) {
          item.title = item.caseName;
        }
        if (item.volume == null) {
          item.volume = item.reporterVolume;
        }
        break;
      case 'computerProgram':
        if (item.publisher == null) {
          item.publisher = item.company;
        }
        break;
      case 'conferencePaper':
        if (item.publicationTitle == null) {
          item.publicationTitle = item.proceedingsTitle;
        }
        break;
      case 'dictionaryEntry':
        if (item.publicationTitle == null) {
          item.publicationTitle = item.dictionaryTitle;
        }
        break;
      case 'email':
        if (item.title == null) {
          item.title = item.subject;
        }
        break;
      case 'encyclopediaArticle':
        if (item.publicationTitle == null) {
          item.publicationTitle = item.encyclopediaTitle;
        }
        break;
      case 'film':
        if (item.medium == null) {
          item.medium = item.videoRecordingFormat;
        }
        if (item.publisher == null) {
          item.publisher = item.distributor;
        }
        if (item.type == null) {
          item.type = item.genre;
        }
        break;
      case 'forumPost':
        if (item.publicationTitle == null) {
          item.publicationTitle = item.forumTitle;
        }
        if (item.type == null) {
          item.type = item.postType;
        }
        break;
      case 'hearing':
        if (item.number == null) {
          item.number = item.documentNumber;
        }
        break;
      case 'interview':
        if (item.medium == null) {
          item.medium = item.interviewMedium;
        }
        break;
      case 'letter':
        if (item.type == null) {
          item.type = item.letterType;
        }
        break;
      case 'manuscript':
        if (item.type == null) {
          item.type = item.manuscriptType;
        }
        break;
      case 'map':
        if (item.type == null) {
          item.type = item.mapType;
        }
        break;
      case 'patent':
        if (item.date == null) {
          item.date = item.issueDate;
        }
        if (item.number == null) {
          item.number = item.patentNumber;
        }
        break;
      case 'podcast':
        if (item.medium == null) {
          item.medium = item.audioFileType;
        }
        if (item.number == null) {
          item.number = item.episodeNumber;
        }
        break;
      case 'presentation':
        if (item.type == null) {
          item.type = item.presentationType;
        }
        break;
      case 'radioBroadcast':
        if (item.medium == null) {
          item.medium = item.audioRecordingFormat;
        }
        if (item.number == null) {
          item.number = item.episodeNumber;
        }
        if (item.publicationTitle == null) {
          item.publicationTitle = item.programTitle;
        }
        if (item.publisher == null) {
          item.publisher = item.network;
        }
        break;
      case 'report':
        if (item.number == null) {
          item.number = item.reportNumber;
        }
        if (item.publisher == null) {
          item.publisher = item.institution;
        }
        if (item.type == null) {
          item.type = item.reportType;
        }
        break;
      case 'statute':
        if (item.date == null) {
          item.date = item.dateEnacted;
        }
        if (item.number == null) {
          item.number = item.publicLawNumber;
        }
        if (item.title == null) {
          item.title = item.nameOfAct;
        }
        break;
      case 'thesis':
        if (item.publisher == null) {
          item.publisher = item.university;
        }
        if (item.type == null) {
          item.type = item.thesisType;
        }
        break;
      case 'tvBroadcast':
        if (item.medium == null) {
          item.medium = item.videoRecordingFormat;
        }
        if (item.number == null) {
          item.number = item.episodeNumber;
        }
        if (item.publicationTitle == null) {
          item.publicationTitle = item.programTitle;
        }
        if (item.publisher == null) {
          item.publisher = item.network;
        }
        break;
      case 'videoRecording':
        if (item.medium == null) {
          item.medium = item.videoRecordingFormat;
        }
        if (item.publisher == null) {
          item.publisher = item.studio;
        }
        break;
      case 'webpage':
        if (item.publicationTitle == null) {
          item.publicationTitle = item.websiteTitle;
        }
        if (item.type == null) {
          item.type = item.websiteType;
        }
    }
    return item;
  };

  function _Class() {
    this.db = Zotero.BetterBibTeX.DB;
    this.stats = {
      clear: 0,
      hit: 0,
      miss: 0
    };
  }

  _Class.prototype.reset = function(reason) {
    Zotero.BetterBibTeX.debug('serialized.reset:', new Error(reason));
    this.db.serialized.removeDataOnly();
    return this.stats = {
      clear: 0,
      hit: 0,
      miss: 0
    };
  };

  _Class.prototype.remove = function(itemID) {
    Zotero.BetterBibTeX.debug('serialized.remove:', {
      itemID: itemID
    });
    this.stats.clear++;
    return this.db.serialized.removeWhere({
      itemID: parseInt(itemID)
    });
  };

  _Class.prototype.get = function(zoteroItem) {
    var id, item, itemID, ref, ref1;
    if (zoteroItem.itemType && zoteroItem.itemID && zoteroItem.uri) {
      return zoteroItem;
    }
    itemID = parseInt(zoteroItem.getField ? zoteroItem.id : zoteroItem.itemID);
    item = this.db.serialized.findOne({
      itemID: itemID
    });
    if (item) {
      Zotero.BetterBibTeX.debug('serialized: hit');
      this.stats.hit++;
    } else {
      Zotero.BetterBibTeX.debug('serialized: miss');
      this.stats.miss++;
      if (typeof zoteroItem.isAttachment !== 'function') {
        zoteroItem = Zotero.Items.get(itemID);
      }
      if (zoteroItem.isAttachment()) {
        item = Zotero.Translate.ItemGetter.prototype._attachmentToArray(zoteroItem);
      } else {
        item = Zotero.Utilities.Internal.itemToExportFormat(zoteroItem);
      }
      switch (false) {
        case !!item:
          item = {
            itemID: itemID,
            itemType: 'cache-miss'
          };
          break;
        case (ref = item.itemType) !== 'note' && ref !== 'attachment':
          this.fixup(item, itemID);
          item.attachmentIDs = [];
          break;
        default:
          this.fixup(item, itemID);
          item.attachmentIDs = zoteroItem.getAttachments() || [];
      }
      this.db.serialized.insert(item);
    }
    if (item.itemType === 'cache-miss') {
      return null;
    }
    if ((ref1 = item.itemType) !== 'note' && ref1 !== 'attachment') {
      item.attachments = (function() {
        var i, len, ref2, results;
        ref2 = item.attachmentIDs;
        results = [];
        for (i = 0, len = ref2.length; i < len; i++) {
          id = ref2[i];
          results.push(this.get({
            itemID: id
          }));
        }
        return results;
      }).call(this);
    }
    return JSON.parse(JSON.stringify(item));
  };

  return _Class;

})());
