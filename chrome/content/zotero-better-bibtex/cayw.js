// Generated by CoffeeScript 1.10.0
var hasProp = {}.hasOwnProperty;

Zotero.BetterBibTeX.CAYW = {
  shortLocator: {
    article: "art.",
    chapter: "ch.",
    subchapter: "subch.",
    column: "col.",
    figure: "fig.",
    line: "l.",
    note: "n.",
    issue: "no.",
    opus: "op.",
    page: "p.",
    paragraph: "para.",
    subparagraph: "subpara.",
    part: "pt.",
    rule: "r.",
    section: "sec.",
    subsection: "subsec.",
    Section: "Sec.",
    'sub verbo': "sv.",
    schedule: "sch.",
    title: "tit.",
    verse: "vrs.",
    volume: "vol."
  }
};

Zotero.BetterBibTeX.CAYW.Document = (function() {
  function Document(config1) {
    this.config = config1;
    this.fields = [];
  }

  Document.prototype.cleanup = function() {};

  Document.prototype.activate = function() {
    var results, win, windows, wm;
    if (!this.config.minimize) {
      return;
    }
    wm = Components.classes['@mozilla.org/appshell/window-mediator;1'].getService(Components.interfaces.nsIWindowMediator);
    windows = wm.getEnumerator(null);
    results = [];
    while (windows.hasMoreElements()) {
      win = windows.getNext().QueryInterface(Components.interfaces.nsIDOMChromeWindow);
      results.push(win.minimize());
    }
    return results;
  };

  Document.prototype.displayAlert = function() {
    return 0;
  };

  Document.prototype.cursorInField = function() {
    return null;
  };

  Document.prototype.convert = function() {};

  Document.prototype.setBibliographyStyle = function() {};

  Document.prototype.canInsertField = function(fieldType) {
    Zotero.BetterBibTeX.debug('CAYW.Document.canInsertField:', fieldType);
    return true;
  };

  Document.prototype.getDocumentData = function() {
    return '';
  };

  Document.prototype.setDocumentData = function(data) {
    return Zotero.BetterBibTeX.debug('CAYW.Document.setDocumenData:', data);
  };

  Document.prototype.insertField = function(fieldType, noteType) {
    var field;
    Zotero.BetterBibTeX.debug('CAYW.Document.insertField:', fieldType, noteType);
    field = Zotero.BetterBibTeX.CAYW.Field(fieldType, noteType);
    this.fields.push(field);
    return field;
  };

  Document.prototype.getFields = function(fieldType) {
    var field;
    return (function() {
      var i, len, ref, results;
      ref = this.fields;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        if (field.fieldType === fieldType) {
          results.push(field);
        }
      }
      return results;
    }).call(this);
  };

  Document.prototype.getFieldsAsync = function(fieldType, observer) {
    throw new Error('CAYW.Document.getFieldsAsync');
  };

  return Document;

})();

Zotero.BetterBibTeX.CAYW.Field = (function() {
  function Field(fieldType1, noteType1) {
    this.fieldType = fieldType1;
    this.noteType = noteType1;
  }

  Field.prototype.setCode = function(code) {
    this.code = code;
  };

  return Field;

})();

Zotero.BetterBibTeX.CAYW.CitationEditInterface = (function() {
  function CitationEditInterface(deferred1, config, doc) {
    var base, base1, base2, base3, base4, base5, base6, base7;
    this.deferred = deferred1;
    this.doc = doc;
    this.citation = {
      citationItems: [],
      properties: {}
    };
    this.wrappedJSObject = this;
    this.config = JSON.parse(JSON.stringify(config));
    (base = this.config).citeprefix || (base.citeprefix = '');
    (base1 = this.config).citeprefix || (base1.citeprefix = '');
    (base2 = this.config).citepostfix || (base2.citepostfix = '');
    (base3 = this.config).keyprefix || (base3.keyprefix = '');
    (base4 = this.config).keypostfix || (base4.keypostfix = '');
    (base5 = this.config).separator || (base5.separator = ',');
    (base6 = this.config).clipboard || (base6.clipboard = false);
    (base7 = this.config).format || (base7.format = '');
    if (this.config.format.match(/^cite/)) {
      this.config.command = this.config.format;
      this.config.format = 'latex';
    }
  }

  CitationEditInterface.prototype.getItems = function() {
    return Q.fcall(function() {
      return [];
    });
  };

  CitationEditInterface.prototype.accept = function(progressCallback) {
    var citation, citations, citekey, deferred, err, error, formatted, i, j, len, len1, ref, resolve;
    if (progressCallback) {
      progressCallback.call(null, 100);
    }
    citation = [];
    citations = [];
    ref = this.citation.citationItems;
    for (i = 0, len = ref.length; i < len; i++) {
      citation = ref[i];
      if (!citation.label && citation.locator) {
        citation.label = 'page';
      }
      citekey = Zotero.BetterBibTeX.keymanager.get({
        itemID: citation.id
      }, 'on-export');
      if (!citekey) {
        continue;
      }
      citation.citekey = citekey.citekey;
      citations.push(citation);
    }
    if (Zotero.BetterBibTeX.CAYW.Formatter[this.config.format]) {
      try {
        formatted = Zotero.BetterBibTeX.CAYW.Formatter[this.config.format].call(null, citations, this.config);
      } catch (error) {
        err = error;
        Zotero.BetterBibTeX.error('cayw:', err);
        alert('Could not format references: ' + err.msg);
        formatted = '';
      }
    } else {
      formatted = [];
      for (j = 0, len1 = citations.length; j < len1; j++) {
        citation = citations[j];
        formatted.push(this.config.keyprefix + citation.citekey + this.config.keypostfix);
      }
      if (formatted.length === 0) {
        formatted = '';
      } else {
        formatted = this.config.citeprefix + formatted.join(this.config.separator) + this.config.citepostfix;
      }
    }
    Zotero.BetterBibTeX.debug('formatted-type:', typeof formatted);
    if (typeof formatted === 'string') {
      resolve = formatted;
      deferred = Q.defer();
      formatted = deferred.promise;
    }
    Zotero.BetterBibTeX.debug('formatted-type:*', typeof formatted);
    formatted.then((function(_this) {
      return function(res) {
        if (_this.config.clipboard) {
          Zotero.Utilities.Internal.copyTextToClipboard(res);
        }
        _this.deferred.fulfill(res);
        if (!Zotero.BetterBibTeX.pref.get('tests')) {
          Zotero.Integration.currentWindow.close();
        }
        return _this.doc.activate();
      };
    })(this));
    if (typeof resolve === 'string') {
      return deferred.resolve(resolve);
    }
  };

  return CitationEditInterface;

})();

Zotero.BetterBibTeX.CAYW.Formatter = {
  latex: function(citations, config) {
    var citation, formatted, i, j, k, len, len1, ref, state;
    config.command || (config.command = 'cite');
    if (citations.length === 0) {
      return '';
    }
    state = {
      prefix: 0,
      suffix: 0,
      'suppress-author': 0,
      locator: 0,
      label: 0
    };
    if (citations.length > 1) {
      for (i = 0, len = citations.length; i < len; i++) {
        citation = citations[i];
        for (k in citation) {
          if (!hasProp.call(citation, k)) continue;
          if (state[k] == null) {
            state[k] = 0;
          }
          state[k]++;
        }
      }
    }
    if (state.suffix === 0 && state.prefix === 0 && state.locator === 0 && ((ref = state['suppress-author']) === 0 || ref === citations.length)) {
      return "\\" + (citations[0]['suppress-author'] ? 'citeyear' : config.command) + "{" + (((function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = citations.length; j < len1; j++) {
          citation = citations[j];
          results.push(citation.citekey);
        }
        return results;
      })()).join(',')) + "}";
    }
    formatted = '';
    for (j = 0, len1 = citations.length; j < len1; j++) {
      citation = citations[j];
      if (citation.prefix) {
        formatted += ' ' + citation.prefix + ' ';
      }
      formatted += "\\";
      formatted += citation['suppress-author'] ? 'citeyear' : config.command;
      switch (false) {
        case !(citation.locator && citation.suffix):
          formatted += '[' + Zotero.BetterBibTeX.CAYW.shortLocator[citation.label] + ' ' + citation.locator + ', ' + citation.suffix + ']';
          break;
        case !citation.locator:
          formatted += '[' + Zotero.BetterBibTeX.CAYW.shortLocator[citation.label] + ' ' + citation.locator + ']';
          break;
        case !citation.suffix:
          formatted += '[' + citation.suffix + ']';
      }
      formatted += '{' + citation.citekey + '}';
    }
    return formatted.trim();
  },
  mmd: function(citations) {
    var citation, formatted, i, len;
    formatted = [];
    for (i = 0, len = citations.length; i < len; i++) {
      citation = citations[i];
      if (citation.prefix) {
        formatted.push("[" + citation.prefix + "][#" + citation.citekey + "]");
      } else {
        formatted.push("[#" + citation.citekey + "][]");
      }
    }
    return formatted.join('');
  },
  pandoc: function(citations) {
    var citation, cite, formatted, i, len;
    formatted = [];
    for (i = 0, len = citations.length; i < len; i++) {
      citation = citations[i];
      cite = '';
      if (citation.prefix) {
        cite += citation.prefix + " ";
      }
      if (citation['suppress-author']) {
        cite += '-';
      }
      cite += "@" + citation.citekey;
      if (citation.locator) {
        cite += ", " + Zotero.BetterBibTeX.CAYW.shortLocator[citation.label] + " " + citation.locator;
      }
      if (citation.suffix) {
        cite += " " + citation.suffix;
      }
      formatted.push(cite);
    }
    if (formatted.length === 0) {
      return '';
    }
    return '[' + formatted.join(';') + ']';
  },
  'scannable-cite': function(citations) {
    var Mem, citation, date, formatted, i, id, includeTitle, isLegal, item, key, label, len, locator, ref, title, year;
    Mem = (function() {
      function Mem(isLegal1) {
        this.isLegal = isLegal1;
        this.lst = [];
      }

      Mem.prototype.set = function(str, punc, slug) {
        if (!punc) {
          punc = '';
        }
        switch (false) {
          case !str:
            return this.lst.push(str + punc);
          case !!this.isLegal:
            return this.lst.push(slug);
        }
      };

      Mem.prototype.setlaw = function(str, punc) {
        if (!punc) {
          punc = '';
        }
        if (str && this.isLegal) {
          return this.lst.push(str + punc);
        }
      };

      Mem.prototype.get = function() {
        return this.lst.join(' ');
      };

      return Mem;

    })();
    formatted = [];
    for (i = 0, len = citations.length; i < len; i++) {
      citation = citations[i];
      item = Zotero.Items.get(citation.id);
      isLegal = (ref = Zotero.ItemTypes.getName(item.itemTypeID)) === 'bill' || ref === 'case' || ref === 'gazette' || ref === 'hearing' || ref === 'patent' || ref === 'regulation' || ref === 'statute' || ref === 'treaty';
      key = Zotero.BetterBibTeX.pref.get('tests') ? 'ITEMKEY' : item.key;
      id = (function() {
        switch (false) {
          case !item.libraryID:
            return "zg:" + item.libraryID + ":" + key;
          case !Zotero.userID:
            return "zu:" + Zotero.userID + ":" + key;
          default:
            return "zu:0:" + key;
        }
      })();
      locator = citation.locator ? Zotero.BetterBibTeX.CAYW.shortLocator[citation.label] + " " + citation.locator : '';
      if (citation.prefix == null) {
        citation.prefix = '';
      }
      if (citation.suffix == null) {
        citation.suffix = '';
      }
      title = new Mem(isLegal);
      title.set(item.firstCreator, ',', 'anon.');
      includeTitle = false;
      try {
        includeTitle = Zotero.Prefs.get('translators.ODFScan.includeTitle');
      } catch (undefined) {}
      if (includeTitle || !item.firstCreator) {
        title.set(item.getField('shortTitle') || item.getField('title'), ',', '(no title)');
      }
      try {
        title.setlaw(item.getField('authority'), ',');
      } catch (undefined) {}
      try {
        title.setlaw(item.getField('volume'));
      } catch (undefined) {}
      try {
        title.setlaw(item.getField('reporter'));
      } catch (undefined) {}
      title.setlaw(item.getField('pages'));
      year = new Mem(isLegal);
      try {
        year.setlaw(item.getField('court'), ',');
      } catch (undefined) {}
      date = Zotero.Date.strToDate(item.getField('date'));
      year.set((date.year ? date.year : item.getField('date')), '', 'no date');
      label = (title.get() + ' ' + year.get()).trim();
      if (citation['suppress-author']) {
        label = "-" + label;
      }
      formatted.push("{" + citation.prefix + "|" + label + "|" + locator + "|" + citation.suffix + "|" + id + "}");
    }
    return formatted.join('');
  },
  'atom-zotero-citations': function(citations, options) {
    var citation, citekey, citekeys, cp, item, itemID, itemIDs, label, prefix, ref, style, url;
    if (options == null) {
      options = {};
    }
    citekeys = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = citations.length; i < len; i++) {
        citation = citations[i];
        results.push(citation.citekey);
      }
      return results;
    })();
    itemIDs = (function() {
      var i, len, ref, results;
      ref = Zotero.BetterBibTeX.schomd.itemIDs(citekeys, options);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        if (item) {
          results.push(item);
        }
      }
      return results;
    })();
    url = "http://www.zotero.org/styles/" + ((ref = options.style) != null ? ref : 'apa');
    style = Zotero.Styles.get(url);
    cp = style.getCiteProc();
    cp.setOutputFormat('markdown');
    cp.updateItems(itemIDs);
    label = cp.appendCitationCluster({
      citationItems: (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = itemIDs.length; i < len; i++) {
          itemID = itemIDs[i];
          results.push({
            id: itemID
          });
        }
        return results;
      })(),
      properties: {}
    }, true)[0][1];
    prefix = citekeys.length === 1 && citekeys[0].toLowerCase() === citekeys[0] ? '@' : '#';
    citekeys = ((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = citekeys.length; i < len; i++) {
        citekey = citekeys[i];
        results.push("" + prefix + citekey);
      }
      return results;
    })()).join(',');
    return "[" + label + "](" + citekeys + ")";
  },
  translate: function(citations, options) {
    var citation, deferred, exportOptions, items, ref, ref1, translator;
    if (options == null) {
      options = {};
    }
    items = Zotero.Items.get((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = citations.length; i < len; i++) {
        citation = citations[i];
        results.push(citation.id);
      }
      return results;
    })());
    translator = options.translator || 'biblatex';
    translator = Zotero.BetterBibTeX.getTranslator(translator) || translator;
    Zotero.BetterBibTeX.debug('cayw.translate:', {
      requested: options,
      got: translator
    });
    exportOptions = {
      exportNotes: (ref = (options.exportNotes || '').toLowerCase()) === 'yes' || ref === 'y' || ref === 'true',
      useJournalAbbreviation: (ref1 = (options.useJournalAbbreviation || '').toLowerCase()) === 'yes' || ref1 === 'y' || ref1 === 'true'
    };
    deferred = Q.defer();
    Zotero.BetterBibTeX.translate(translator, {
      items: items
    }, exportOptions, function(err, result) {
      if (err) {
        return deferred.reject(err);
      } else {
        return deferred.fulfill(result);
      }
    });
    return deferred.promise;
  }
};
