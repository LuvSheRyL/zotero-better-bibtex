// Generated by CoffeeScript 1.10.0
var BetterBibTeXAutoExport, BetterBibTeXAutoExportPref, BetterBibTeXPref,
  hasProp = {}.hasOwnProperty,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BetterBibTeXPref = {
  paneLoad: function() {
    var disabled, i, j, len, ref, tab, tabs;
    disabled = null;
    tabs = document.getElementById('better-bibtex-prefs-tabs');
    ref = tabs.getElementsByTagName('tab');
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      tab = ref[i];
      tab.setAttribute('hidden', !(tab.id === 'better-bibtex-prefs-disabled' ? Zotero.BetterBibTeX.disabled : !Zotero.BetterBibTeX.disabled));
      if (tab.id === 'better-bibtex-prefs-disabled') {
        disabled = i;
      }
    }
    if (Zotero.BetterBibTeX.disabled) {
      document.getElementById('better-bibtex-prefs-tabpanels').selectedIndex = disabled;
      document.getElementById('zotero-better-bibtex-disabled-message').value = Zotero.BetterBibTeX.disabled;
    }
    BetterBibTeXPref.savedPattern = Zotero.BetterBibTeX.pref.get('citekeyFormat');
    BetterBibTeXPref.update();
    Zotero.BetterBibTeX.debug('prefs pane loaded:', document.location.hash);
    if (document.location.hash === '#better-bibtex') {
      return setTimeout((function() {
        return document.getElementById('zotero-prefs').showPane(document.getElementById('zotero-prefpane-better-bibtex'));
      }), 500);
    }
  },
  saveCitekeyFormat: function() {
    return BetterBibTeXPref.savedPattern = Zotero.BetterBibTeX.pref.get('citekeyFormat');
  },
  checkCitekeyFormat: function() {
    var err, error, error1, keyformat;
    keyformat = document.getElementById('id-better-bibtex-preferences-citekeyFormat');
    try {
      return BetterBibTeXPatternParser.parse(keyformat.value);
    } catch (error) {
      err = error;
      if (BetterBibTeXPref.savedPattern) {
        try {
          BetterBibTeXPatternParser.parse(BetterBibTeXPref.savedPattern);
        } catch (error1) {
          BetterBibTeXPref.savedPattern = null;
        }
      }
      if (BetterBibTeXPref.savedPattern) {
        return Zotero.BetterBibTeX.pref.set('citekeyFormat', BetterBibTeXPref.savedPattern);
      } else {
        return Zotero.BetterBibTeX.pref.clearUserPref('citekeyFormat');
      }
    }
  },
  paneUnload: function() {
    var err, error;
    try {
      return BetterBibTeXPatternParser.parse(Zotero.BetterBibTeX.pref.get('citekeyFormat'));
    } catch (error) {
      err = error;
      return Zotero.BetterBibTeX.pref.set('citekeyFormat', BetterBibTeXPref.savedPattern);
    }
  },
  styleChanged: function(index) {
    var selectedItem, styleID, stylebox;
    stylebox = document.getElementById('better-bibtex-abbrev-style');
    selectedItem = typeof index !== 'undefined' ? stylebox.getItemAtIndex(index) : stylebox.selectedItem;
    styleID = selectedItem.getAttribute('value');
    return Zotero.BetterBibTeX.pref.set('autoAbbrevStyle', styleID);
  },
  clone: function(obj) {
    var clone, key, value;
    clone = Object.create(null);
    for (key in obj) {
      if (!hasProp.call(obj, key)) continue;
      value = obj[key];
      clone[key] = value;
    }
    return clone;
  },
  display: function(id, text) {
    var elt;
    elt = document.getElementById(id);
    elt.value = text;
    if (text !== '') {
      return elt.setAttribute('tooltiptext', text);
    }
  },
  update: function() {
    var err, error, i, itemNode, j, k, keyformat, len, len1, parseerror, ref, refill, selectedIndex, selectedStyle, serverCheckbox, serverEnabled, state, style, stylebox, styles;
    serverCheckbox = document.getElementById('id-better-bibtex-preferences-server-enabled');
    serverEnabled = !!serverCheckbox.checked;
    serverCheckbox.setAttribute('hidden', Zotero.isStandalone && serverEnabled);
    ref = ['enabled', 'disabled'];
    for (j = 0, len = ref.length; j < len; j++) {
      state = ref[j];
      document.getElementById("better-bibtex-preferences-cacheActivity-" + state).setAttribute('hidden', serverEnabled === (state === 'disabled'));
    }
    keyformat = document.getElementById('id-better-bibtex-preferences-citekeyFormat');
    parseerror = null;
    try {
      BetterBibTeXPatternParser.parse(keyformat.value);
    } catch (error) {
      err = error;
      parseerror = err;
    }
    Zotero.BetterBibTeX.debug('parsing format', keyformat.value, ':', !parseerror);
    keyformat.setAttribute('style', (parseerror ? '-moz-appearance: none !important; background-color: DarkOrange' : ''));
    keyformat.setAttribute('tooltiptext', '' + (parseerror || ''));
    document.getElementById('id-better-bibtex-preferences-pin-citekeys-on-change').setAttribute('disabled', !Zotero.BetterBibTeX.allowAutoPin());
    document.getElementById('id-better-bibtex-preferences-pin-citekeys-on-export').setAttribute('disabled', !Zotero.BetterBibTeX.allowAutoPin());
    document.getElementById('id-zotero-better-bibtex-server-warning').setAttribute('hidden', serverEnabled);
    document.getElementById('id-zotero-better-bibtex-recursive-warning').setAttribute('hidden', !document.getElementById('id-better-bibtex-preferences-getCollections').checked);
    styles = (function() {
      var k, len1, ref1, results;
      ref1 = Zotero.Styles.getVisible();
      results = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        style = ref1[k];
        if (style.usesAbbreviation) {
          results.push(style);
        }
      }
      return results;
    })();
    stylebox = document.getElementById('better-bibtex-abbrev-style');
    refill = stylebox.children.length === 0;
    selectedStyle = Zotero.BetterBibTeX.pref.get('autoAbbrevStyle');
    selectedIndex = -1;
    for (i = k = 0, len1 = styles.length; k < len1; i = ++k) {
      style = styles[i];
      if (refill) {
        itemNode = document.createElement('listitem');
        itemNode.setAttribute('value', style.styleID);
        itemNode.setAttribute('label', style.title);
        stylebox.appendChild(itemNode);
      }
      if (style.styleID === selectedStyle) {
        selectedIndex = i;
      }
    }
    if (selectedIndex === -1) {
      selectedIndex = 0;
    }
    BetterBibTeXPref.styleChanged(selectedIndex);
    window.setTimeout((function() {
      stylebox.ensureIndexIsVisible(selectedIndex);
      stylebox.selectedIndex = selectedIndex;
    }), 0);
    return BetterBibTeXAutoExportPref.refresh();
  },
  cacheReset: function() {
    Zotero.BetterBibTeX.cache.reset('user request');
    return Zotero.BetterBibTeX.serialized.reset('user request');
  }
};

BetterBibTeXAutoExportPref = {
  remove: function() {
    var exportlist, id, selected;
    exportlist = document.getElementById('better-bibtex-export-list');
    selected = exportlist.currentIndex;
    if (selected < 0) {
      return;
    }
    id = exportlist.contentView.getItemAtIndex(selected).getAttribute('autoexport');
    Zotero.BetterBibTeX.DB.autoexport.remove(parseInt(id));
    return this.refresh();
  },
  mark: function() {
    var ae, err, error, exportlist, id, selected, translation;
    exportlist = document.getElementById('better-bibtex-export-list');
    selected = exportlist.currentIndex;
    if (selected < 0) {
      return;
    }
    id = parseInt(exportlist.contentView.getItemAtIndex(selected).getAttribute('autoexport'));
    ae = Zotero.BetterBibTeX.DB.autoexport.get(id);
    if (!ae) {
      Zotero.BetterBibTeX.debug('No autoexport', id);
      return;
    }
    try {
      translation = Zotero.BetterBibTeX.auto.prepare(ae);
    } catch (error) {
      err = error;
      Zotero.BetterBibTeX.debug('failed to prepare', ae, err.message);
      return;
    }
    if (!translation) {
      Zotero.BetterBibTeX.auto.mark(ae, 'done');
      return;
    }
    translation.setHandler('done', function(obj, worked) {
      Zotero.BetterBibTeX.auto.mark(ae, (worked ? 'done' : 'error'));
      return Zotero.BetterBibTeX.auto.refresh();
    });
    return translation.translate();
  },
  exportType: function(id) {
    var m;
    switch (false) {
      case id !== '':
        return '';
      case id !== 'library':
        return 'library';
      case !(m = /^(library|search|collection):[0-9]+$/.exec(id)):
        return m[1];
      default:
        return id;
    }
  },
  exportName: function(id, full) {
    var err, error, m, name;
    try {
      name = (function() {
        var ref, ref1;
        switch (false) {
          case id !== '':
            return '';
          case id !== 'library':
            return Zotero.Libraries.getName();
          case !(m = /^library:([0-9]+)$/.exec(id)):
            return Zotero.Libraries.getName(m[1]);
          case !(m = /^search:([0-9]+)$/.exec(id)):
            return (ref = Zotero.Searches.get(m[1])) != null ? ref.name : void 0;
          case !(m = /^collection:([0-9]+)$/.exec(id)):
            if (full) {
              return this.collectionPath(m[1]);
            } else {
              return (ref1 = Zotero.Collections.get(m[1])) != null ? ref1.name : void 0;
            }
        }
      }).call(this);
      return name || id;
    } catch (error) {
      err = error;
      return "not found: " + id;
    }
  },
  collectionPath: function(id) {
    var coll;
    if (!id) {
      return '';
    }
    coll = Zotero.Collections.get(id);
    if (!coll) {
      return '';
    }
    if (coll.parent) {
      return this.collectionPath(coll.parent) + '/' + coll.name;
    }
    return coll.name;
  },
  refresh: function() {
    var ae, exportlist, j, len, ref, results, status, tree;
    exportlist = document.getElementById('better-bibtex-auto-exports');
    while (exportlist.firstChild) {
      exportlist.removeChild(exportlist.firstChild);
    }
    tree = new BetterBibTeXAutoExport('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', exportlist, document);
    ref = Zotero.BetterBibTeX.DB.autoexport.chain().simplesort('path').data();
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      ae = ref[j];
      Zotero.BetterBibTeX.debug('refresh:', {
        id: ae.$loki,
        status: ae.status,
        running: Zotero.BetterBibTeX.auto.running
      });
      status = Zotero.BetterBibTeX.auto.running === ae.$loki ? 'running' : ae.status + " (" + ae.updated + ")";
      results.push(tree.treeitem({
        autoexport: "" + ae['$loki'],
        '': function() {
          return this.treerow(function() {
            this.treecell({
              editable: 'false',
              label: (BetterBibTeXAutoExportPref.exportType(ae.collection)) + ": " + (BetterBibTeXAutoExportPref.exportName(ae.collection))
            });
            this.treecell({
              editable: 'false',
              label: status
            });
            this.treecell({
              editable: 'false',
              label: ae.path
            });
            this.treecell({
              editable: 'false',
              label: Zotero.BetterBibTeX.translatorName(ae.translatorID)
            });
            this.treecell({
              editable: 'false',
              label: ae.exportCharset
            });
            this.treecell({
              editable: 'false',
              label: '' + ae.useJournalAbbreviation
            });
            return this.treecell({
              editable: 'false',
              label: '' + ae.exportNotes
            });
          });
        }
      }));
    }
    return results;
  }
};

BetterBibTeXAutoExport = (function(superClass) {
  extend(BetterBibTeXAutoExport, superClass);

  function BetterBibTeXAutoExport(namespace, root, doc) {
    this.namespace = namespace;
    this.root = root;
    this.doc = doc;
    BetterBibTeXAutoExport.__super__.constructor.call(this, this.namespace, this.root, this.doc);
  }

  BetterBibTeXAutoExport.prototype.Node = BetterBibTeXAutoExport;

  BetterBibTeXAutoExport.prototype.alias(['treerow', 'treeitem', 'treecell', 'treechildren', 'listitem']);

  return BetterBibTeXAutoExport;

})(Zotero.BetterBibTeX.XmlNode);
