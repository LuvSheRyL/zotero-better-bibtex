// Generated by CoffeeScript 1.10.0
var Report, doExport,
  hasProp = {}.hasOwnProperty;

Report = (function() {
  function Report() {
    var id, item, notes, ref, ref1, title;
    this.items = Object.create(null);
    while (item = Zotero.nextItem()) {
      if (item.itemType === 'note' || ((ref = item.notes) != null ? ref.length : void 0) > 0) {
        this.items[item.itemID] = item;
      }
    }
    this.itemInCollection = Object.create(null);
    this.collections = [];
    this.mark(Translator.collections);
    title = Translator.HTMLEncode(Zotero.getOption('exportFilename').replace(/\.[^\.]*$/i, ''));
    this.html = "<html><head><title>" + title + "</title></head><body>";
    notes = [];
    ref1 = this.items;
    for (id in ref1) {
      if (!hasProp.call(ref1, id)) continue;
      item = ref1[id];
      if (this.itemInCollection[id]) {
        continue;
      }
      notes.push(item);
    }
    this.notes(notes, 1);
    this.walk(Translator.collections, 1);
    this.html += '</body></html>';
  }

  Report.prototype.walk = function(collection, level) {
    var coll, i, id, len, notes, ref, results;
    if (!(collection != null ? collection.notes : void 0)) {
      return;
    }
    this.html += "<h" + level + ">" + (Translator.HTMLEncode(collection.name)) + "</h" + level + ">\n";
    notes = (function() {
      var i, len, ref, results;
      ref = collection.items;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        id = ref[i];
        if (this.items[id]) {
          results.push(this.items[id]);
        }
      }
      return results;
    }).call(this);
    this.notes(notes, level);
    ref = collection.collections;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      coll = ref[i];
      results.push(this.walk(coll, level + 1));
    }
    return results;
  };

  Report.prototype.notes = function(items, level) {
    var i, item, j, len, len1, results;
    for (i = 0, len = items.length; i < len; i++) {
      item = items[i];
      if (this.itemInCollection[item.itemID]) {
        continue;
      }
      if (item.itemType !== 'note') {
        continue;
      }
      this.note(item);
    }
    results = [];
    for (j = 0, len1 = items.length; j < len1; j++) {
      item = items[j];
      if (this.itemInCollection[item.itemID]) {
        continue;
      }
      if (item.itemType === 'note') {
        continue;
      }
      results.push(this.itemWithNotes(item, level + 1));
    }
    return results;
  };

  Report.prototype.note = function(item) {
    return this.html += "<div>" + item.note + "</div>\n";
  };

  Report.prototype.creator = function(cr) {
    var name;
    if (!(cr.firstName || cr.lastName)) {
      return '';
    }
    return ((function() {
      var i, len, ref, results;
      ref = [cr.lastName, cr.firstName];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        if (name) {
          results.push(name);
        }
      }
      return results;
    })()).join(', ');
  };

  Report.prototype.itemWithNotes = function(item, level) {
    var author, creator, creators, date, i, len, note, ref, results, str, title;
    title = item.title;
    creators = (function() {
      var i, len, ref, results;
      ref = item.creators;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        creator = ref[i];
        results.push(this.creator(creator));
      }
      return results;
    }).call(this);
    creators = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = creators.length; i < len; i++) {
        creator = creators[i];
        if (creator) {
          results.push(creator);
        }
      }
      return results;
    })();
    if (creators.length > 0) {
      creators = creators.join(' and');
    } else {
      creators = null;
    }
    if (item.date) {
      date = Zotero.Utilities.strToDate(item.date);
      if (typeof date.year === 'undefined') {
        date = item.date;
      } else {
        date = Zotero.Utilities.strToISO(item.date);
      }
    } else {
      date = null;
    }
    author = (function() {
      var i, len, ref, results;
      ref = [creators, date];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        str = ref[i];
        if (str) {
          results.push(str);
        }
      }
      return results;
    })();
    if (author.length > 0) {
      author = "(" + (author.join(', ')) + ")";
    } else {
      author = null;
    }
    title = ((function() {
      var i, len, ref, results;
      ref = [item.title || '', author];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        str = ref[i];
        if (str) {
          results.push(str);
        }
      }
      return results;
    })()).join(' ');
    this.html += "<h" + (level + 1) + ">" + (Translator.HTMLEncode(title)) + "</h" + (level + 1) + ">\n";
    ref = item.notes;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      note = ref[i];
      results.push(this.html += "<div>" + note.note + "</div>\n");
    }
    return results;
  };

  Report.prototype.mark = function(collection) {
    var coll, i, id, j, k, len, len1, len2, notes, ref, ref1, ref2;
    if (!collection) {
      return;
    }
    this.collections.push(collection);
    notes = false;
    ref = collection.items || [];
    for (i = 0, len = ref.length; i < len; i++) {
      id = ref[i];
      if (!this.items[id]) {
        continue;
      }
      this.itemInCollection[id] = true;
      notes = true;
    }
    if (notes) {
      ref1 = this.collections;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        coll = ref1[j];
        coll.notes = true;
      }
    }
    ref2 = collection.collections || [];
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      coll = ref2[k];
      mark(coll);
    }
    return this.collections.pop();
  };

  return Report;

})();

doExport = function() {
  var report;
  Translator.initialize();
  report = new Report();
  return Zotero.write(report.html);
};
