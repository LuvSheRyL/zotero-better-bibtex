// Generated by CoffeeScript 1.10.0
var LaTeX;

if (!LaTeX) {
  LaTeX = {};
}

LaTeX.text2latex = function(text, options) {
  var latex;
  if (options == null) {
    options = {};
  }
  latex = this.html2latex(this.cleanHTML(text, options), options);
  if (latex.indexOf("\\{") >= 0 || latex.indexOf("\\textleftbrace") >= 0 || latex.indexOf("\\}") >= 0 || latex.indexOf("\\textrightbrace") >= 0) {
    latex = BetterBibTeXBraceBalancer.parse(latex);
  }
  return latex;
};

LaTeX.titleCase = function(string) {
  return string.replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g, function(match, index, title) {
    if (index > 0 && index + match.length !== title.length && match.search(Translator.titleCaseLowerCase) === 0 && title.charAt(index - 2) !== ':' && (title.charAt(index + match.length) !== '-' || title.charAt(index - 1) === '-') && title.charAt(index - 1).search(/[^"'(\s-]/) < 0) {
      Translator.debug('titleCase: LC', match);
      return match;
    }
    if (match.search(Translator.titleCaseUpperCase) === 0) {
      Translator.debug('titleCase: UC', match);
      return match;
    }
    if (match.substr(1).search(/[A-Z]|\../) > -1) {
      Translator.debug('titleCase: NC', match);
      return match;
    }
    Translator.debug('titleCase: TC', match);
    return match.charAt(0).toUpperCase() + match.substr(1);
  });
};

LaTeX.cleanHTML = function(text, options) {
  var _html, c, html, i, j, len, plain, ref, titleCased;
  ref = BetterBibTeXMarkupParser.parse(text, {
    titleCase: options.autoCase && Translator.titleCase,
    preserveCaps: options.autoCase,
    csquotes: Translator.csquotes
  }), html = ref.html, plain = ref.plain;
  if (options.autoCase && Translator.titleCase) {
    Translator.debug('TITLECASE:>', plain.text);
    titleCased = this.titleCase(plain.text);
    Translator.debug('TITLECASE:<', titleCased);
    _html = '';
    for (i = j = 0, len = html.length; j < len; i = ++j) {
      c = html[i];
      if (plain.unprotected[i] !== void 0) {
        _html += titleCased[plain.unprotected[i]];
      } else {
        _html += c;
      }
    }
    html = _html;
  }
  return html;
};

LaTeX.html2latex = function(html, options) {
  var latex;
  latex = (new this.HTML(html, options)).latex;
  latex = latex.replace(/(\\\\)+\s*\n\n/g, "\n\n");
  latex = latex.replace(/\n\n\n+/g, "\n\n");
  return latex;
};

LaTeX.HTML = (function() {
  function HTML(html, options1) {
    this.options = options1 != null ? options1 : {};
    this.latex = '';
    this.mapping = (Translator.unicode ? LaTeX.toLaTeX.unicode : LaTeX.toLaTeX.ascii);
    this.stack = [];
    this.preserveCase = 0;
    this.walk(Zotero.BetterBibTeX.HTMLParser(html));
  }

  HTML.prototype.walk = function(tag) {
    var child, j, len, ref, ref1, ref2;
    if (!tag) {
      return;
    }
    switch (tag.name) {
      case '#text':
        this.chars(tag.text);
        return;
      case 'script':
        this.latex += tag.text;
        return;
    }
    this.stack.unshift(tag);
    switch (tag.name) {
      case 'i':
      case 'em':
      case 'italic':
        if (this.options.autoCase && !this.preserveCase) {
          this.latex += '{';
        }
        this.latex += '\\emph{';
        break;
      case 'b':
      case 'strong':
        if (this.options.autoCase && !this.preserveCase) {
          this.latex += '{';
        }
        this.latex += '\\textbf{';
        break;
      case 'a':
        if (((ref = tag.attrs.href) != null ? ref.length : void 0) > 0) {
          this.latex += "\\href{" + tag.attrs.href + "}{";
        }
        break;
      case 'sup':
        if (this.options.autoCase && !this.preserveCase) {
          this.latex += '{';
        }
        this.latex += '\\textsuperscript{';
        break;
      case 'sub':
        if (this.options.autoCase && !this.preserveCase) {
          this.latex += '{';
        }
        this.latex += '\\textsubscript{';
        break;
      case 'br':
        if (this.latex !== '' && this.latex[this.latex.length - 1] !== "\n") {
          this.latex += "\\\\";
        }
        this.latex += "\n";
        break;
      case 'p':
      case 'div':
      case 'table':
      case 'tr':
        this.latex += "\n\n";
        break;
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
        this.latex += "\n\n\\" + ((new Array(parseInt(tag.name[1]))).join('sub')) + "section{";
        break;
      case 'ol':
        this.latex += "\n\n\\begin{enumerate}\n";
        break;
      case 'ul':
        this.latex += "\n\n\\begin{itemize}\n";
        break;
      case 'li':
        this.latex += "\n\\item ";
        break;
      case 'span':
      case 'sc':
        tag.smallcaps = tag.name === 'sc' || (tag.attrs.style || '').match(/small-caps/i);
        tag.enquote = tag.attrs.enquote === 'true';
        if (tag["class"].nocase) {
          this.preserveCase += 1;
        }
        if (tag["class"].nocase && this.preserveCase === 1) {
          this.latex += '{{';
        }
        if (this.options.autoCase && !this.preserveCase && (tag.enquote || tag.smallcaps)) {
          this.latex += '{';
        }
        if (tag.enquote) {
          this.latex += '\\enquote{';
        }
        if (tag.smallcaps) {
          this.latex += '\\textsc{';
        }
        break;
      case 'td':
      case 'th':
        this.latex += ' ';
        break;
      case 'tbody':
      case '#document':
      case 'html':
      case 'head':
      case 'body':
        break;
      default:
        Translator.debug("unexpected tag '" + tag.name + "'");
    }
    ref1 = tag.children;
    for (j = 0, len = ref1.length; j < len; j++) {
      child = ref1[j];
      this.walk(child);
    }
    switch (tag.name) {
      case 'i':
      case 'italic':
      case 'em':
        this.latex += '}';
        if (this.options.autoCase && !this.preserveCase) {
          this.latex += '}';
        }
        break;
      case 'sup':
      case 'sub':
      case 'b':
      case 'strong':
        this.latex += '}';
        if (this.options.autoCase && !this.preserveCase) {
          this.latex += '}';
        }
        break;
      case 'a':
        if (((ref2 = tag.attrs.href) != null ? ref2.length : void 0) > 0) {
          this.latex += '}';
        }
        break;
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
        this.latex += "}\n\n";
        break;
      case 'p':
      case 'div':
      case 'table':
      case 'tr':
        this.latex += "\n\n";
        break;
      case 'span':
      case 'sc':
        if (tag.smallcaps) {
          this.latex += '}';
        }
        if (tag.enquote) {
          this.latex += '}';
        }
        if (this.options.autoCase && !this.preserveCase && (tag.smallcaps || tag.enquote)) {
          this.latex += '{';
        }
        if (tag["class"].nocase && this.options.autoCase && this.preserveCase === 1) {
          this.latex += '}}';
        }
        if (tag["class"].nocase) {
          this.preserveCase -= 1;
        }
        break;
      case 'td':
      case 'th':
        this.latex += ' ';
        break;
      case 'ol':
        this.latex += "\n\n\\end{enumerate}\n";
        break;
      case 'ul':
        this.latex += "\n\n\\end{itemize}\n";
    }
    return this.stack.shift();
  };

  HTML.prototype.chars = function(text) {
    var block, blocks, c, j, k, len, math, ref, results;
    blocks = [];
    ref = XRegExp.split(text, '');
    for (j = 0, len = ref.length; j < len; j++) {
      c = ref[j];
      math = this.mapping.math[c];
      if (blocks.length === 0 || blocks[0].math !== !!math) {
        blocks.unshift({
          math: !!math,
          text: ''
        });
      }
      blocks[0].text += math || this.mapping.text[c] || c;
    }
    results = [];
    for (k = blocks.length - 1; k >= 0; k += -1) {
      block = blocks[k];
      if (block.math) {
        if (block.text.match(/^{[^{}]*}$/)) {
          results.push(this.latex += "\\ensuremath" + block.text);
        } else {
          results.push(this.latex += "\\ensuremath{" + block.text + "}");
        }
      } else {
        results.push(this.latex += block.text);
      }
    }
    return results;
  };

  return HTML;

})();
