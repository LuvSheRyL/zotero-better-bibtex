// Generated by CoffeeScript 1.10.0
var LaTeX;

if (!LaTeX) {
  LaTeX = {};
}

LaTeX.text2latex = function(text) {
  var latex;
  latex = this.html2latex(this.cleanHTML(text));
  if (latex.indexOf("\\{") >= 0 || latex.indexOf("\\textleftbrace") >= 0 || latex.indexOf("\\}") >= 0 || latex.indexOf("\\textrightbrace") >= 0) {
    return BetterBibTeXBraceBalancer.parse(latex);
  }
  return latex;
};

LaTeX.cleanHTML = function(text) {
  var cdata, ch, chunk, close, html, i, j, k, len, len1, open, ref, ref1;
  html = '';
  cdata = false;
  if (Translator.csquotes.length > 0) {
    open = '';
    close = '';
    ref = Translator.csquotes;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      ch = ref[i];
      if (i % 2 === 0) {
        open += ch;
      } else {
        close += ch;
      }
    }
    text = text.replace(new RegExp("[" + open + "][\\s\\u00A0]?", 'g'), '<span enquote="true">');
    text = text.replace(new RegExp("[\\s\\u00A0]?[" + close + "]", 'g'), '</span>');
  }
  text = text.replace(/<pre[^>]*>(.*?)<\/pre[^>]*>/g, function(match, pre) {
    return "<pre>" + (Translator.HTMLEncode(pre)) + "</pre>";
  });
  ref1 = text.split(/(<\/?(?:i|italic|b|sub|sup|pre|sc|span)(?:[^>a-z][^>]*)?>)/i);
  for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
    chunk = ref1[i];
    if (i % 2 === 0) {
      html += Translator.HTMLEncode(chunk);
    } else {
      html += chunk;
    }
  }
  Translator.debug('cleanHTML:', {
    text: text,
    html: html
  });
  return html;
};

LaTeX.html2latex = function(html) {
  var latex;
  latex = (new this.HTML(html)).latex;
  latex = latex.replace(/(\\\\)+\s*\n\n/g, "\n\n");
  latex = latex.replace(/\n\n\n+/g, "\n\n");
  return latex;
};

LaTeX.HTML = (function() {
  function HTML(html) {
    this.latex = '';
    this.mapping = (Translator.unicode ? LaTeX.toLaTeX.unicode : LaTeX.toLaTeX.ascii);
    this.state = {};
    this.walk(Zotero.BetterBibTeX.HTMLParser(html));
  }

  HTML.prototype.walk = function(tag) {
    var child, j, len, ref, ref1, ref2;
    if (!tag) {
      return;
    }
    if (tag.name === '#text') {
      if ((this.state.pre || 0) > 0) {
        this.latex += tag.text;
      } else {
        this.chars(tag.text);
      }
      return;
    }
    this.state[tag.name] = (this.state[tag.name] || 0) + 1;
    switch (tag.name) {
      case 'i':
      case 'em':
      case 'italic':
        this.latex += '\\emph{';
        break;
      case 'b':
      case 'strong':
        this.latex += '\\textbf{';
        break;
      case 'a':
        if (((ref = tag.attrs.href) != null ? ref.length : void 0) > 0) {
          this.latex += "\\href{" + tag.attrs.href + "}{";
        }
        break;
      case 'sup':
        this.latex += '\\textsuperscript{';
        break;
      case 'sub':
        this.latex += '\\textsubscript{';
        break;
      case 'br':
        if (this.latex !== '' && this.latex[this.latex.length - 1] !== "\n") {
          this.latex += "\\\\";
        }
        this.latex += "\n";
        break;
      case 'p':
      case 'div':
      case 'table':
      case 'tr':
        this.latex += "\n\n";
        break;
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
        this.latex += "\n\n\\" + ((new Array(parseInt(tag.name[1]))).join('sub')) + "section{";
        break;
      case 'ol':
        this.latex += "\n\n\\begin{enumerate}\n";
        break;
      case 'ul':
        this.latex += "\n\n\\begin{itemize}\n";
        break;
      case 'li':
        this.latex += "\n\\item ";
        break;
      case 'span':
      case 'sc':
        tag.smallcaps = tag.name === 'sc' || (tag.attrs.style || '').match(/small-caps/i);
        tag.enquote = tag.attrs.enquote === 'true';
        if (tag.enquote) {
          this.latex += '\\enquote{';
        }
        if (tag.smallcaps) {
          this.latex += '\\textsc{';
        }
        break;
      case 'td':
      case 'th':
        this.latex += ' ';
        break;
      case 'tbody':
      case '#document':
      case 'html':
      case 'head':
      case 'body':
        break;
      default:
        Translator.debug("unexpected tag '" + tag.name + "'");
    }
    ref1 = tag.children;
    for (j = 0, len = ref1.length; j < len; j++) {
      child = ref1[j];
      this.walk(child);
    }
    switch (tag.name) {
      case 'i':
      case 'italic':
      case 'em':
      case 'sup':
      case 'sub':
      case 'b':
      case 'strong':
        this.latex += '}';
        break;
      case 'a':
        if (((ref2 = tag.attrs.href) != null ? ref2.length : void 0) > 0) {
          this.latex += '}';
        }
        break;
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
        this.latex += "}\n\n";
        break;
      case 'p':
      case 'div':
      case 'table':
      case 'tr':
        this.latex += "\n\n";
        break;
      case 'span':
      case 'sc':
        if (tag.smallcaps || tag.enquote) {
          this.latex += '}';
        }
        break;
      case 'td':
      case 'th':
        this.latex += ' ';
        break;
      case 'ol':
        this.latex += "\n\n\\end{enumerate}\n";
        break;
      case 'ul':
        this.latex += "\n\n\\end{itemize}\n";
    }
    return this.state[tag.name] -= 1;
  };

  HTML.prototype.chars = function(text) {
    var block, blocks, c, j, k, len, math, ref, results;
    blocks = [];
    ref = XRegExp.split(text, '');
    for (j = 0, len = ref.length; j < len; j++) {
      c = ref[j];
      math = this.mapping.math[c];
      if (blocks.length === 0 || blocks[0].math !== !!math) {
        blocks.unshift({
          math: !!math,
          text: ''
        });
      }
      blocks[0].text += math || this.mapping.text[c] || c;
    }
    results = [];
    for (k = blocks.length - 1; k >= 0; k += -1) {
      block = blocks[k];
      if (block.math) {
        if (block.text.match(/^{[^{}]*}$/)) {
          results.push(this.latex += "\\ensuremath" + block.text);
        } else {
          results.push(this.latex += "\\ensuremath{" + block.text + "}");
        }
      } else {
        results.push(this.latex += block.text);
      }
    }
    return results;
  };

  return HTML;

})();
